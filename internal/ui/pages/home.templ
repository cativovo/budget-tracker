package pages

import "github.com/cativovo/budget-tracker/internal/ui/layouts"
import "github.com/cativovo/budget-tracker/internal/store"
import "github.com/cativovo/budget-tracker/internal/constants"
import "strconv"
import "fmt"

type HomeProps struct {
	Transactions []store.TransactionByDateRow
	QueryParams  string
	HasNextPage  bool
}

templ Home(props HomeProps) {
	@layouts.Main() {
		<ul id="transactions">
			for _, v := range props.Transactions {
				if len(v.Transactions) > 0 {
					<li>
						<strong>{ v.Date.Time.Format(constants.DateFormat) } </strong>
						if !v.TotalExpenses.IsZero() {
							<span>(Expenses: { v.TotalExpenses.String() })</span>
						}
						if !v.TotalIncome.IsZero() {
							<span>(Income: { v.TotalIncome.String() })</span>
						}
						<ul>
							for _, t := range v.Transactions {
								<li>
									<span>{ t.Name } ({ fmt.Sprintf("%.2f", t.Amount) })</span>
									@transactionType(int16(t.TransactionType))
								</li>
							}
						</ul>
					</li>
				}
			}
		</ul>
		<button
			id="load-more-btn"
			hx-get={ string(templ.URL("/?" + props.QueryParams)) }
			hx-select="#transactions>li"
			hx-swap="afterend"
			hx-target="#transactions>li:last-child"
			hx-select-oob="load-more-btn"
			hx-push-url="true"
		>
			load more
		</button>
	}
}

templ transactionType(t int16) {
	switch t {
		case constants.TransactionTypeExpense:
			<span>(Expense)</span>
		case constants.TransactionTypeIncome:
			<span>(Income)</span>
		default:
			<span>invalid type ({ strconv.Itoa(int(t)) })</span>
	}
}
