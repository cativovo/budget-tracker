package pages

import "github.com/cativovo/budget-tracker/internal/ui/layouts"
import "github.com/cativovo/budget-tracker/internal/store"
import "github.com/cativovo/budget-tracker/internal/constants"
import "fmt"
import "github.com/cativovo/budget-tracker/internal/ui"

type HomeProps struct {
	Transactions []store.TransactionByDateRow
	QueryParams  string
	HasNextPage  bool
	AssetsStore  ui.AssetsStore
}

templ Home(props HomeProps) {
	@layouts.Main(layouts.MainProps{
		AssetsStore: props.AssetsStore,
	}) {
		<ul id="transactions" class="space-y-1">
			for i, v := range props.Transactions {
				<li>
					<div class="flex py-1 text-xs">
						<span>{ v.Date.Time.Format("January 02, Monday") } </span>
						<div class="inline-block ml-auto space-x-2">
							if !v.TotalExpenses.IsZero() {
								<span>Expenses: { v.TotalExpenses.String() }</span>
							}
							if !v.TotalIncome.IsZero() {
								<span>Income: { v.TotalIncome.String() }</span>
							}
						</div>
					</div>
					<ul class="pl-4 space-y-1 list-disc border-t divide-y">
						for j, t := range v.Transactions {
							<li
								class="flex gap-1 items-center py-2"
								if props.HasNextPage && i == len(props.Transactions)-1 && j == len(v.Transactions)-1 {
									hx-get={ string(templ.URL("/?" + props.QueryParams)) }
									hx-select="#transactions>li"
									hx-swap="afterend"
									hx-target="#transactions>li:last-child"
									hx-push-url="true"
									hx-trigger="intersect once"
								}
							>
								// TODO: get the value of icon from db
								<i data-lucide="chart-pie"></i>
								<span>{ t.Name }</span>
								<span class="ml-auto">{ formatAmount(t.Amount, t.TransactionType) }</span>
							</li>
						}
					</ul>
				</li>
			}
			if !props.HasNextPage {
				<li>no more</li>
			}
		</ul>
	}
}

func formatAmount(amount float64, transactionType int16) string {
	var symbol string
	switch transactionType {
	case constants.TransactionTypeExpense:
		symbol = "-"
	case constants.TransactionTypeIncome:
		symbol = "+"
	}
	return fmt.Sprintf("%s%.2f", symbol, amount)
}
