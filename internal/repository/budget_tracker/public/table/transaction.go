//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transaction = newTransactionTable("public", "transaction", "")

type transactionTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	TransactionType postgres.ColumnString
	Name            postgres.ColumnString
	Amount          postgres.ColumnInteger
	Description     postgres.ColumnString
	Date            postgres.ColumnDate
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp
	CategoryID      postgres.ColumnString
	AccountID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionTable struct {
	transactionTable

	EXCLUDED transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTransactionTableImpl("", "excluded", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		TransactionTypeColumn = postgres.StringColumn("transaction_type")
		NameColumn            = postgres.StringColumn("name")
		AmountColumn          = postgres.IntegerColumn("amount")
		DescriptionColumn     = postgres.StringColumn("description")
		DateColumn            = postgres.DateColumn("date")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		CategoryIDColumn      = postgres.StringColumn("category_id")
		AccountIDColumn       = postgres.StringColumn("account_id")
		allColumns            = postgres.ColumnList{IDColumn, TransactionTypeColumn, NameColumn, AmountColumn, DescriptionColumn, DateColumn, CreatedAtColumn, UpdatedAtColumn, CategoryIDColumn, AccountIDColumn}
		mutableColumns        = postgres.ColumnList{TransactionTypeColumn, NameColumn, AmountColumn, DescriptionColumn, DateColumn, CreatedAtColumn, UpdatedAtColumn, CategoryIDColumn, AccountIDColumn}
	)

	return transactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		TransactionType: TransactionTypeColumn,
		Name:            NameColumn,
		Amount:          AmountColumn,
		Description:     DescriptionColumn,
		Date:            DateColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		CategoryID:      CategoryIDColumn,
		AccountID:       AccountIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
