// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (name, icon, color_hex, account_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, icon, color_hex
`

type CreateCategoryParams struct {
	Name      string
	Icon      string
	ColorHex  string
	AccountID pgtype.UUID
}

type CreateCategoryRow struct {
	ID       pgtype.UUID
	Name     string
	Icon     string
	ColorHex string
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (CreateCategoryRow, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.Icon,
		arg.ColorHex,
		arg.AccountID,
	)
	var i CreateCategoryRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.ColorHex,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE account_id=$1 AND id=$2
`

type DeleteCategoryParams struct {
	AccountID pgtype.UUID
	ID        pgtype.UUID
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.AccountID, arg.ID)
	return err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, icon, color_hex FROM category
WHERE account_id=$1
ORDER BY name
`

type ListCategoriesRow struct {
	ID       pgtype.UUID
	Name     string
	Icon     string
	ColorHex string
}

func (q *Queries) ListCategories(ctx context.Context, accountID pgtype.UUID) ([]ListCategoriesRow, error) {
	rows, err := q.db.Query(ctx, listCategories, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCategoriesRow
	for rows.Next() {
		var i ListCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.ColorHex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET name=$1, icon=$2, color_hex=$3
WHERE account_id=$4 AND id=$5
RETURNING id, name, icon, color_hex
`

type UpdateCategoryParams struct {
	Name      string
	Icon      string
	ColorHex  string
	AccountID pgtype.UUID
	ID        pgtype.UUID
}

type UpdateCategoryRow struct {
	ID       pgtype.UUID
	Name     string
	Icon     string
	ColorHex string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (UpdateCategoryRow, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.Icon,
		arg.ColorHex,
		arg.AccountID,
		arg.ID,
	)
	var i UpdateCategoryRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.ColorHex,
	)
	return i, err
}
