// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const countTransactions = `-- name: CountTransactions :one
SELECT 
(
	SELECT
		COUNT(id)
	FROM transaction
	WHERE transaction.account_id = $1 AND transaction.transaction_type = 0 AND transaction.date BETWEEN $2 AND $3
) as expense_count,
(
	SELECT
		COUNT(id)
	FROM transaction
	WHERE transaction.account_id = $1 AND transaction.transaction_type = 1 AND transaction.date BETWEEN $2 AND $3
) as income_count
`

type CountTransactionsParams struct {
	AccountID pgtype.UUID
	StartDate pgtype.Date
	EndDate   pgtype.Date
}

type CountTransactionsRow struct {
	ExpenseCount int64
	IncomeCount  int64
}

func (q *Queries) CountTransactions(ctx context.Context, arg CountTransactionsParams) (CountTransactionsRow, error) {
	row := q.db.QueryRow(ctx, countTransactions, arg.AccountID, arg.StartDate, arg.EndDate)
	var i CountTransactionsRow
	err := row.Scan(&i.ExpenseCount, &i.IncomeCount)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
WITH inserted_transaction as (
	INSERT INTO transaction (name, amount, transaction_type, description, date, category_id, account_id)
	VALUES ($1, $2, $3, $4, $5, $6, $7)
	RETURNING id, transaction_type, name, amount, description, date, created_at, updated_at, category_id, account_id
) SELECT 
	inserted_transaction.id as id,
	inserted_transaction.transaction_type as transaction_type,
	inserted_transaction.name as name,
	inserted_transaction.description as description,
	inserted_transaction.date as date,
	inserted_transaction.created_at as created_at,
	inserted_transaction.updated_at as updated_at,
	category.name as category,
	category.color_hex as color,
	category.icon as icon
FROM inserted_transaction 
LEFT JOIN category ON category.id = inserted_transaction.category_id
`

type CreateTransactionParams struct {
	Name            string
	Amount          decimal.Decimal
	TransactionType int16
	Description     pgtype.Text
	Date            pgtype.Date
	CategoryID      pgtype.UUID
	AccountID       pgtype.UUID
}

type CreateTransactionRow struct {
	ID              pgtype.UUID
	TransactionType int16
	Name            string
	Description     pgtype.Text
	Date            pgtype.Date
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	Category        pgtype.Text
	Color           pgtype.Text
	Icon            pgtype.Text
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Name,
		arg.Amount,
		arg.TransactionType,
		arg.Description,
		arg.Date,
		arg.CategoryID,
		arg.AccountID,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Color,
		&i.Icon,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transaction WHERE account_id = $1 AND id = $2
`

type DeleteTransactionParams struct {
	AccountID pgtype.UUID
	ID        pgtype.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.Exec(ctx, deleteTransaction, arg.AccountID, arg.ID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT 
	transaction.id as id,
	transaction.transaction_type as transaction_type,
	transaction.name as name,
	transaction.description as description,
	transaction.date as date,
	transaction.created_at as created_at,
	transaction.updated_at as updated_at,
	category.name as category,
	category.color_hex as color,
	category.icon as icon
FROM transaction 
LEFT JOIN category ON category.id = transaction.category_id
WHERE category.account_id = $1 AND transaction.id = $2
`

type GetTransactionParams struct {
	AccountID pgtype.UUID
	ID        pgtype.UUID
}

type GetTransactionRow struct {
	ID              pgtype.UUID
	TransactionType int16
	Name            string
	Description     pgtype.Text
	Date            pgtype.Date
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	Category        pgtype.Text
	Color           pgtype.Text
	Icon            pgtype.Text
}

func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (GetTransactionRow, error) {
	row := q.db.QueryRow(ctx, getTransaction, arg.AccountID, arg.ID)
	var i GetTransactionRow
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Color,
		&i.Icon,
	)
	return i, err
}

const listTransactionsByDate = `-- name: ListTransactionsByDate :one
WITH daily_totals AS (
		SELECT DISTINCT transaction.date
		FROM transaction
		WHERE transaction.account_id = $1 AND transaction.date BETWEEN $4 AND $5
		ORDER BY transaction.date
		LIMIT $2
		OFFSET $3
)
SELECT JSON_BUILD_OBJECT(
    'count', (
        SELECT COUNT(DISTINCT transaction.date)
        FROM transaction
				WHERE transaction.account_id = $1 AND transaction.date BETWEEN $4 AND $5
    ),
    'transactions', COALESCE(
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'date', daily_totals.date,
                'transactions', (
                    SELECT COALESCE(
                        JSON_AGG(
                            JSON_BUILD_OBJECT(
                                'id', transaction.id,
                                'name', transaction.name,
                                'amount', transaction.amount,
                                'description', transaction.description,
                                'date', transaction.date,
                                'transaction_type', transaction.transaction_type
                            )
                        ),
                        '[]'::JSON
                    )
                    FROM transaction
										WHERE transaction.account_id = $1 AND transaction.date = daily_totals.date AND transaction.transaction_type = ANY($6::SMALLINT[])
                )
            )
        ),
        '[]'::JSON
    )
) AS result
FROM daily_totals
`

type ListTransactionsByDateParams struct {
	AccountID        pgtype.UUID
	Limit            int32
	Offset           int32
	StartDate        pgtype.Date
	EndDate          pgtype.Date
	TransactionTypes []int16
}

func (q *Queries) ListTransactionsByDate(ctx context.Context, arg ListTransactionsByDateParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, listTransactionsByDate,
		arg.AccountID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
		arg.TransactionTypes,
	)
	var result []byte
	err := row.Scan(&result)
	return result, err
}

const updateTransaction = `-- name: UpdateTransaction :one
WITH updated_transaction as (
	UPDATE transaction
	SET name = $1, description = $2, date = $3, category_id = $4
	WHERE transaction.account_id = $5 AND transaction.id=$6
	RETURNING id, transaction_type, name, amount, description, date, created_at, updated_at, category_id, account_id
) 
SELECT 
	updated_transaction.id as id,
	updated_transaction.transaction_type as transaction_type,
	updated_transaction.name as name,
	updated_transaction.description as description,
	updated_transaction.date as date,
	updated_transaction.created_at as created_at,
	updated_transaction.updated_at as updated_at,
	category.name as category,
	category.color_hex as color,
	category.icon as icon
FROM updated_transaction 
LEFT JOIN category ON category.id = updated_transaction.category_id
`

type UpdateTransactionParams struct {
	Name        string
	Description pgtype.Text
	Date        pgtype.Date
	CategoryID  pgtype.UUID
	AccountID   pgtype.UUID
	ID          pgtype.UUID
}

type UpdateTransactionRow struct {
	ID              pgtype.UUID
	TransactionType int16
	Name            string
	Description     pgtype.Text
	Date            pgtype.Date
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	Category        pgtype.Text
	Color           pgtype.Text
	Icon            pgtype.Text
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (UpdateTransactionRow, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Name,
		arg.Description,
		arg.Date,
		arg.CategoryID,
		arg.AccountID,
		arg.ID,
	)
	var i UpdateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
		&i.Color,
		&i.Icon,
	)
	return i, err
}
